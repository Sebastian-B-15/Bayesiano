BF1 <- lmBF(rating ~ complaints + privileges + learning + raises + critical + advance, data = attitude)
BF2 <- lmBF(rating ~ complaints + learning, data = attitude)
# Deberiamos "dividir" todos los BF de los modelos entre sí para detectar el mejor, en este caso sacamos el factor de bayes del modelo de dos variables versus el modelo completo
BF2/BF1
log10(93.7) #El modelo con 2 variables es mejor
summary(BF2)
BF2 <- lmBF(rating ~ complaints + learning, data = attitude, posterior = T, iterations = 10000)
summary(BF2) #La variable (vector aleatorio) al cual generar valores no generó valores positivos y negativos es significativa (sus cuantiles "centrales" no pasan por el cero)
BF2 <- lmBF(rating ~ complaints + learning, data = attitude, posterior = T, iterations = 10000)
# Deberiamos "dividir" todos los BF de los modelos entre sí para detectar el mejor, en este caso sacamos el factor de bayes del modelo de dos variables versus el modelo completo
BF2/BF1
# Deberiamos "dividir" todos los BF de los modelos entre sí para detectar el mejor, en este caso sacamos el factor de bayes del modelo de dos variables versus el modelo completo
BF2/BF1
BF1 <- lmBF(rating ~ complaints + privileges + learning + raises + critical + advance, data = attitude)
BF2 <- lmBF(rating ~ complaints + learning, data = attitude)
# Deberiamos "dividir" todos los BF de los modelos entre sí para detectar el mejor, en este caso sacamos el factor de bayes del modelo de dos variables versus el modelo completo
BF2/BF1
log10(93.7) #El modelo con 2 variables es mejor
BF3 <- lmBF(rating ~ complaints + learning, data = attitude)
BF3
BF1/BF3
BF2/BF3
BF3 <- lmBF(rating ~ complaints, data = attitude)
BF2/BF3
m1 <- lm(rating ~ complaints + learning, data = datos)
m2 <- lm(rating ~ ., data = datos)
bayesFactor(m1, m2, rscale = 0.5)
bayes_factor(m1, m2, rscale = 0.5)
BF1 <- lmBF(rating ~ complaints + privileges + learning + raises + critical + advance, data = attitude)
BF1
BF2 <- lmBF(rating ~ complaints + learning, data = attitude)
BF2
BF1
head(output)
BF1
BF1 <- lmBF(rating ~ complaints + privileges + learning + raises + critical + advance, data = attitude)
BF1
generalTestBF(rating ~ ., data = datos)
prueba <- generalTestBF(rating ~ ., data = datos)
head(prueba)
head(output) # Aparecen los elementos en orden descendente, se muestra el BF del modelo indicado versus al intercepto
BF1 <- lmBF(rating ~ ., data = datos)
BF2 <- lmBF(rating ~ complaints + learning, data = datos)
BF1 <- lmBF(rating ~ ., data = datos)
BF1 <- lmBF(rating ~ ., data = datos)
datos
BF1 <- lmBF(rating ~ complaints + learning + raises + advance + privileges, data = datos)
BF2 <- lmBF(rating ~ complaints + learning, data = datos)
BF3 <- lmBF(rating ~ 1, data = datos)
BF3 <- lmBF(rating ~ complainta, data = datos)
BF3 <- lmBF(rating ~ complaints, data = datos)
BF1
BF1[1]
BF1[[1]]
View(BF1)
BF1$bayesFactor
BF1
BF2
BF3 # Podemos ver que comparado contra el intercepto, su BF es 207271.9
BF3/BF2
BF3/BF1
417938.6/7144
BF3/BF2 # El factor de Bayes del modelo 3 contra el 2 es de 58.5 (resultado de la división)
BF3/BF1
BF2
BF3/BF2 # El factor de Bayes del modelo 3 contra el 2 es de 2.016 (resultado de la división)
log10(2.016379) #El modelo con 2 variables es mejor
summary(BF3) #Información del modelo elegido
BF3 <- lmBF(rating ~ complaints, data = attitude, posterior = T, iterations = 10000)
# Posterior = T, devuelve muestras de la distribución a posteriori de los coeficientes $\beta_i$, $\sigma^2$ y $g$
summary(BF3) #La variable (vector aleatorio) al cual generar valores no generó valores positivos y negativos es significativa (sus cuantiles "centrales" no pasan por el cero)
C_1 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_1 + b_1)/(gamma(a_1)*gamma(b_1)) * gamma(Y+a_1) + gamma(n-Y+b_1)/gamma(n+a_1+b_1)
n <- 17
Y <- 10
a_1 <- 1 # \alpha_1
b_1 <- 23 # \beta_1
a_2 <- 15 # \alpha_2
b_2 <- 1 # \beta_2
C_1 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_1 + b_1)/(gamma(a_1)*gamma(b_1)) * gamma(Y+a_1) + gamma(n-Y+b_1)/gamma(n+a_1+b_1)
C_1
C_2 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_2 + b_2)/(gamma(a_2)*gamma(b_2)) * gamma(Y+a_2) + gamma(n-Y+b_2)/gamma(n+a_2+b_2)
C_2
C_1
C <- 0.5*C_1 + 0.5*C_2
c(C_1, C_2)/C
w_1 <- 0.5 * C_1 / C
w_2 <- 0.5 * C_2 / C
(w_1 <- 0.5 * C_1 / C)
(w_2 <- 0.5 * C_2 / C)
C_1 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_1 + b_1)/(gamma(a_1)*gamma(b_1)) * gamma(Y+a_1) + gamma(n-Y+b_1)/gamma(n+a_1+b_1)
C_1
C_2
C_2 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_2 + b_2)/(gamma(a_2)*gamma(b_2)) * gamma(Y+a_2) + gamma(n-Y+b_2)/gamma(n+a_2+b_2)
n+a_2+b_2
n+a_1+b_1
C_1 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_1 + b_1)/(gamma(a_1)*gamma(b_1)) * gamma(Y+a_1) + gamma(n-Y+b_1)/gamma(n+a_1+b_1)
C_1
C_2 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_2 + b_2)/(gamma(a_2)*gamma(b_2)) * gamma(Y+a_2) + gamma(n-Y+b_2)/gamma(n+a_2+b_2)
C_2
gamma(n)/(gamma(n-Y)*gamma(Y))
gamma(n)/(gamma(n-Y)*gamma(Y))
gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_2 + b_2)
a_2 + b_2
a_1 + b_1
n <- 17
Y <- 10
a_1 <- 1 # \alpha_1
b_1 <- 23 # \beta_1
a_2 <- 20 # \alpha_2
b_2 <- 1 # \beta_2
C_1 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_1 + b_1)/(gamma(a_1)*gamma(b_1)) * gamma(Y+a_1) + gamma(n-Y+b_1)/gamma(n+a_1+b_1)
C_2 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_2 + b_2)/(gamma(a_2)*gamma(b_2)) * gamma(Y+a_2) + gamma(n-Y+b_2)/gamma(n+a_2+b_2)
C_1
C_2
n <- 17
Y <- 10
a_1 <- 1 # \alpha_1
b_1 <- 23 # \beta_1
a_2 <- 23 # \alpha_2
b_2 <- 1 # \beta_2
C_1 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_1 + b_1)/(gamma(a_1)*gamma(b_1)) * gamma(Y+a_1) + gamma(n-Y+b_1)/gamma(n+a_1+b_1)
C_2 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_2 + b_2)/(gamma(a_2)*gamma(b_2)) * gamma(Y+a_2) + gamma(n-Y+b_2)/gamma(n+a_2+b_2)
C_1
C_2
Y+a_2
Y+a_1
n-Y+b_2
n-Y+b_1
n <- 17
Y <- 10
a_1 <- 1 # \alpha_1
b_1 <- 23 # \beta_1
a_2 <- 15 # \alpha_2
b_2 <- 1 # \beta_2
C_1 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_1 + b_1)/(gamma(a_1)*gamma(b_1)) * gamma(Y+a_1) * gamma(n-Y+b_1)/gamma(n+a_1+b_1)
C_2 <- gamma(n)/(gamma(n-Y)*gamma(Y)) * gamma(a_2 + b_2)/(gamma(a_2)*gamma(b_2)) * gamma(Y+a_2) * gamma(n-Y+b_2)/gamma(n+a_2+b_2)
C_1
C_2
C <- 0.5*C_1 + 0.5*C_2
(w_1 <- 0.5 * C_1 / C)
(w_2 <- 0.5 * C_2 / C)
C_1 <- gamma(n)*gamma(a_1+b_1)*gamma(Y+a_1)*gamma(n-Y+b_1)/(gamma(n-Y)*gamma(Y)*gamma(n+a_1+b_1)*gamma(a_1)*gamma(b_1))
n <- 17
Y <- 10
a_1 <- 1 # \alpha_1
b_1 <- 23 # \beta_1
a_2 <- 15 # \alpha_2
b_2 <- 1 # \beta_2
C_1 <- gamma(n+1)*gamma(a_1+b_1)*gamma(Y+a_1)*gamma(n-Y+b_1)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_1+b_1)*gamma(a_1)*gamma(b_1))
C_2 <- gamma(n+1)*gamma(a_2+b_2)*gamma(Y+a_2)*gamma(n-Y+b_2)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_2+b_2)*gamma(a_2)*gamma(b_2))
C_1
C_2
gamma(n+1)*gamma(a_2+b_2)*gamma(Y+a_2)*gamma(n-Y+b_2)
gamma(n+1)*gamma(a_1+b_1)*gamma(Y+a_1)*gamma(n-Y+b_1)
(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_1+b_1)*gamma(a_1)*gamma(b_1))
(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_2+b_2)*gamma(a_2)*gamma(b_2))
n <- 17
Y <- 10
a_1 <- 1 # \alpha_1
b_1 <- 23 # \beta_1
a_2 <- 15 # \alpha_2
b_2 <- 1 # \beta_2
C_1 <- gamma(n+1)*gamma(a_1+b_1)*gamma(Y+a_1)*gamma(n-Y+b_1)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_1+b_1)*gamma(a_1)*gamma(b_1))
C_2 <- gamma(n+1)*gamma(a_2+b_2)*gamma(Y+a_2)*gamma(n-Y+b_2)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_2+b_2)*gamma(a_2)*gamma(b_2))
(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_1+b_1)*gamma(a_1)*gamma(b_1))
(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_2+b_2)*gamma(a_2)*gamma(b_2))
gamma(n+1)*gamma(a_2+b_2)*gamma(Y+a_2)*gamma(n-Y+b_2)
gamma(n+1)*gamma(a_1+b_1)*gamma(Y+a_1)*gamma(n-Y+b_1)
(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_1+b_1)*gamma(a_1)*gamma(b_1))
gamma(n+a_2+b_2)
gamma(n+a_1+b_1)
library(nleqslv) #cargamos la librería respectiva nleqslv por ejemplo
library(nleqslv) #cargamos la librería respectiva nleqslv por ejemplo
ecuaciones <- function(x){
ec1 <- x[1]/(x[1] + x[2]) - 0.04 #esta es la función de la primera ecuación igualada a 0: f(x,y) = 0
ec2 <- x[1]*x[2]/((x[1] + x[2])^2 * (x[1] + x[2] + 1)) - 0.00007
return(c(ec1, ec2))
}
guess <- c(10,10) #Valor inicial para las iteraciones
nleqslv(guess, ecuaciones) #El valor indicado por $x es
library(nleqslv) #cargamos la librería respectiva nleqslv por ejemplo
ecuaciones <- function(x){
ec1 <- x[1]/(x[1] + x[2]) - 0.04 #esta es la función de la primera ecuación igualada a 0: f(x,y) = 0
ec2 <- x[1]*x[2]/((x[1] + x[2])^2 * (x[1] + x[2] + 1)) - 0.00007
return(c(ec1, ec2))
}
guess <- c(22,525) #Valor inicial para las iteraciones
nleqslv(guess, ecuaciones) #El valor indicado por $x es
ecuaciones <- function(x){
ec1 <- x[1]/(x[1] + x[2]) - 0.875 #esta es la función de la primera ecuación igualada a 0: f(x,y) = 0
ec2 <- x[1]*x[2]/((x[1] + x[2])^2 * (x[1] + x[2] + 1)) - 0.0032
return(c(ec1, ec2))
}
guess <- c(22,525) #Valor inicial para las iteraciones
guess <- c(225,40) #Valor inicial para las iteraciones
nleqslv(guess, ecuaciones)
ecuaciones <- function(x){
ec1 <- x[1]/(x[1] + x[2]) - 0.875 #esta es la función de la primera ecuación igualada a 0: f(x,y) = 0
ec2 <- x[1]*x[2]/((x[1] + x[2])^2 * (x[1] + x[2] + 1)) - 0.0032
return(c(ec1, ec2))
}
guess <- c(29,4) #Valor inicial para las iteraciones
nleqslv(guess, ecuaciones)
n <- 17
Y <- 10
a_1 <- 21.90286 # \alpha_1
b_1 <- 525.66856 # \beta_1
a_2 <- 29.032225 # \alpha_2
b_2 <- 4.147461 # \beta_2
C_1 <- gamma(n+1)*gamma(a_1+b_1)*gamma(Y+a_1)*gamma(n-Y+b_1)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_1+b_1)*gamma(a_1)*gamma(b_1))
C_2 <- gamma(n+1)*gamma(a_2+b_2)*gamma(Y+a_2)*gamma(n-Y+b_2)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_2+b_2)*gamma(a_2)*gamma(b_2))
C_1
C_2
C_1
gamma(b_1))
gamma(b_1)
ecuaciones <- function(x){
ec1 <- x[1]/(x[1] + x[2]) - 0.04 #esta es la función de la primera ecuación igualada a 0: f(x,y) = 0
ec2 <- x[1]*x[2]/((x[1] + x[2])^2 * (x[1] + x[2] + 1)) - 0.00007
return(c(ec1, ec2))
}
guess <- c(1,23) #Valor inicial para las iteraciones
nleqslv(guess, ecuaciones)
ec2 <- x[1]*x[2]/((x[1] + x[2])^2 * (x[1] + x[2] + 1)) - 0.0007
ecuaciones <- function(x){
ec1 <- x[1]/(x[1] + x[2]) - 0.04 #esta es la función de la primera ecuación igualada a 0: f(x,y) = 0
ec2 <- x[1]*x[2]/((x[1] + x[2])^2 * (x[1] + x[2] + 1)) - 0.0007
return(c(ec1, ec2))
}
guess <- c(1,23) #Valor inicial para las iteraciones
nleqslv(guess, ecuaciones)
n <- 17
Y <- 10
a_1 <- 1 # \alpha_1
b_1 <- 23 # \beta_1
a_2 <- 15 # \alpha_2
b_2 <- 1 # \beta_2
C_1 <- gamma(n+1)*gamma(a_1+b_1)*gamma(Y+a_1)*gamma(n-Y+b_1)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_1+b_1)*gamma(a_1)*gamma(b_1))
C_2 <- gamma(n+1)*gamma(a_2+b_2)*gamma(Y+a_2)*gamma(n-Y+b_2)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_2+b_2)*gamma(a_2)*gamma(b_2))
C <- 0.5*C_1 + 0.5*C_2
(w_1 <- 0.5 * C_1 / C)
(w_2 <- 0.5 * C_2 / C)
n+a_2+b_2
n+a_1+b_1
n-Y+b_1
n-Y+b_2
Y+a_2
Y+a_1
simula.dist.mezcla <- funcion(n){
simula.dist.mezcla <- function(n){
simulaciones <- NULL
for (i in 1:n) {
if (runif(1) < w_1){
simulaciones[i] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simulaciones[i] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
}
simulaciones <- simula.dist.mezcla(10^5)
hist(simulaciones)
simula.dist.mezcla <- function(n){
simulaciones <- NULL
for (i in 1:n) {
if (runif(1) < w_1){
simulaciones[i] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simulaciones[i] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
return(simulaciones)
}
simulaciones <- simula.dist.mezcla(10^5)
hist(simulaciones)
hist(simulaciones, probability = T)
library(TeachingDemos)
intervalo <- hdp(simulaciones)
intervalo <- hpd(simulaciones)
library(TeachingDemos)
intervalo <- emp.hpd(simulaciones, conf=0.95)
intervalo
simula.dist.mezcla <- function(n){
simulaciones <- NULL
for (i in 1:n) {
if (runif(1) < 0.44){
simulaciones[i] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simulaciones[i] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
return(simulaciones)
}
simulaciones <- simula.dist.mezcla(10^5)
hist(simulaciones, probability = T)
library(TeachingDemos)
intervalo <- emp.hpd(simulaciones, conf=0.95)
intervalo
simula.dist.mezcla <- function(n){
simulaciones <- NULL
for (i in 1:n) {
if (runif(1) < 0.44){
simulaciones[i] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simulaciones[i] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
return(simulaciones)
}
simulaciones <- simula.dist.mezcla(10^6)
hist(simulaciones, probability = T)
library(TeachingDemos)
intervalo <- emp.hpd(simulaciones, conf=0.95)
intervalo
intervalo <- emp.hpd(simulaciones, conf=0.75)
intervalo
intervalo <- emp.hpd(simulaciones, conf=0.50)
intervalo
intervalo <- emp.hpd(simulaciones, conf=0.20)
intervalo
install.packages("hdrcde")
region <- emp.hpd(simulaciones, conf=0.20)
library(TeachingDemos)
intervalo <- emp.hpd(simulaciones, conf=0.20)
intervalo
library(hdrcde)
region <- hdr(simulaciones, prob=0.20)
region
Y+a_1
n-Y+b_1
n-Y+b_2
Y+a_2
region <- hdr(simulaciones, prob=0.5)
region
hist(simulaciones, probability = T)
region <- hdr(simulaciones, prob=0.05)
intervalo <- emp.hpd(simulaciones, conf=0.05)
intervalo
region
n-Y+b_2
Y+a_2
Y+a_1
n-Y+b_1
Y+a_1
n-Y+b_1
hist(simulaciones, probability = T, breaks = 50)
n <- 30
Y <- 17
a_1 <- 1 # \alpha_1
b_1 <- 23 # \beta_1
a_2 <- 15 # \alpha_2
b_2 <- 1 # \beta_2
C_1 <- gamma(n+1)*gamma(a_1+b_1)*gamma(Y+a_1)*gamma(n-Y+b_1)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_1+b_1)*gamma(a_1)*gamma(b_1))
C_2 <- gamma(n+1)*gamma(a_2+b_2)*gamma(Y+a_2)*gamma(n-Y+b_2)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_2+b_2)*gamma(a_2)*gamma(b_2))
C_1
C_2
C <- 0.5*C_1 + 0.5*C_2
(w_1 <- 0.5 * C_1 / C)
(w_2 <- 0.5 * C_2 / C)
simula.dist.mezcla <- function(n){
simulaciones <- NULL
for (i in 1:n) {
if (runif(1) < 0.44){
simulaciones[i] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simulaciones[i] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
return(simulaciones)
}
simulaciones <- simula.dist.mezcla(10^5)
hist(simulaciones, probability = T, breaks = 50)
library(TeachingDemos)
intervalo <- emp.hpd(simulaciones, conf=0.05)
intervalo
library(hdrcde)
region <- hdr(simulaciones, prob=0.05)
region
Y+a_1
n-Y+b_1
n <- 17
Y <- 10
a_1 <- 1 # \alpha_1
b_1 <- 23 # \beta_1
a_2 <- 15 # \alpha_2
b_2 <- 1 # \beta_2
C_1 <- gamma(n+1)*gamma(a_1+b_1)*gamma(Y+a_1)*gamma(n-Y+b_1)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_1+b_1)*gamma(a_1)*gamma(b_1))
C_2 <- gamma(n+1)*gamma(a_2+b_2)*gamma(Y+a_2)*gamma(n-Y+b_2)/(gamma(n-Y+1)*gamma(Y+1)*gamma(n+a_2+b_2)*gamma(a_2)*gamma(b_2))
C <- 0.5*C_1 + 0.5*C_2
(w_1 <- 0.5 * C_1 / C)
(w_2 <- 0.5 * C_2 / C)
simula.dist.mezcla <- function(n){
simulaciones <- NULL
for (i in 1:n) {
if (runif(1) < w_1){
simulaciones[i] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simulaciones[i] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
return(simulaciones)
}
simulaciones <- simula.dist.mezcla(10^5)
hist(simulaciones, probability = T, breaks = 50)
library(TeachingDemos)
intervalo <- emp.hpd(simulaciones, conf=0.95)
intervalo
library(hdrcde)
region <- hdr(simulaciones, prob=0.95)
region
Y+a_1, n-Y+b_1
n-Y+b_2
Y+a_2
rbeta(1, Y+a_1, n-Y+b_1)
rbeta(1, Y+a_1, n-Y+b_1)
rbeta(1, Y+a_1, n-Y+b_1)
rbeta(1, Y+a_1, n-Y+b_1)
rbeta(1, Y+a_1, n-Y+b_1)
rbeta(1, Y+a_1, n-Y+b_1)
rbeta(1, Y+a_1, n-Y+b_1)
rbeta(1, Y+a_1, n-Y+b_1)
rbeta(1, Y+a_2, n-Y+b_2)
rbeta(1, Y+a_2, n-Y+b_2)
rbeta(1, Y+a_2, n-Y+b_2)
rbeta(1, Y+a_2, n-Y+b_2)
rbeta(1, Y+a_2, n-Y+b_2)
rbeta(1, Y+a_2, n-Y+b_2)
simulaciones
rbeta(1, Y+a_2, n-Y+b_2)
simula.dist.mezcla <- function(n){
simulaciones <- NULL
for (j in 1:n) {
if (runif(1) < w_1){
simulaciones[i] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simulaciones[i] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
return(simulaciones)
}
simulaciones <- simula.dist.mezcla(10^5)
simula.dist.mezcla <- function(n){
simulaciones <- NULL
for (j in 1:n) {
if (runif(1) < w_1){
simulaciones[j] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simulaciones[j] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
return(simulaciones)
}
simulaciones <- simula.dist.mezcla(10^5)
simulaciones
2.585455e-04
rbeta(1, Y+a_2, n-Y+b_2)
rbeta(1, Y+a_2, n-Y+b_2)
rbeta(1, Y+a_2, n-Y+b_2)
simula <- NULL
for (j in 1:1000) {
if (runif(1) < w_1){
simulaciones[j] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simulaciones[j] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
simula
simula <- NULL
for (j in 1:1000) {
if (runif(1) < w_1){
simula[j] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simula[j] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
simula
hist(simula, probability = T, breaks = 50)
gamma(n+1)
gamma(a_1)
gamma(b_1)
simula <- NULL
for (j in 1:1000) {
if (runif(1) < 0.44){
simula[j] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simula[j] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
hist(simula, probability = T, breaks = 50)
library(TeachingDemos)
intervalo <- emp.hpd(simula, conf=0.95)
intervalo
library(hdrcde)
region <- hdr(simula, prob=0.95)
region
intervalo <- emp.hpd(simula, conf=0.95)
intervalo
region <- hdr.den(simula, prob=0.95)
region
region <- hdr.den(simula, prob=95)
region
region <- hdr.den(simula, prob=95)
