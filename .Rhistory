geom_ribbon(data=datos[datos$x < intervalo[2],][datos$x > intervalo[1],], mapping = aes(ymin=0, ymax=y), fill = "red") +
geom_hline(yintercept=fdp.int, linetype="dashed", lwd=1.5, color="blue")
ggplot(data=datos, mapping=aes(x = x, y = y)) +
geom_ribbon(data=datos[datos$x < intervalo[2],][datos$x > intervalo[1],], mapping = aes(ymin=0, ymax=y), fill = "red") +
geom_line(lwd=1.5) +
labs(title = "Función de densidad",
x = "x",
y = "Densidad a Posteriori"
) +
geom_hline(yintercept=fdp.int, linetype="dashed", lwd=1.5, color="blue")
ggplot(data=datos, mapping=aes(x = x, y = y)) +
geom_ribbon(data=datos[datos$x < intervalo[2],][datos$x > intervalo[1],], mapping = aes(ymin=0, ymax=y), fill = "red") +
geom_line(lwd=1.5) +
labs(title = "Función de densidad",
x = "x",
y = "Densidad a Posteriori"
) +
geom_hline(yintercept=fdp.int, linetype="dashed", lwd=1.5, color="blue") +
theme_classic()
ggplot(data=datos, mapping=aes(x = x, y = y)) +
geom_ribbon(data=datos[datos$x < intervalo[2],][datos$x > intervalo[1],], mapping = aes(ymin=0, ymax=y), fill = "red") +
geom_line(lwd=1.5) +
labs(title = "Función de densidad",
x = "x",
y = "Densidad a Posteriori"
) +
geom_hline(yintercept=fdp.int, linetype="dashed", lwd=1.5, color="blue") +
theme_bw()
ggplot(data=datos, mapping=aes(x = x, y = y)) +
geom_ribbon(data=datos[datos$x < intervalo[2],][datos$x > intervalo[1],], mapping = aes(ymin=0, ymax=y), fill = "red") +
geom_line(lwd=1.5) +
labs(title = "Función de densidad",
x = "x",
y = "Densidad a Posteriori"
) +
geom_hline(yintercept=fdp.int, linetype="dashed", lwd=1.5, color="blue") +
theme_bw()
ggplot(data=datos, mapping=aes(x = x, y = y)) +
geom_ribbon(data=datos[datos$x < intervalo[2],][datos$x > intervalo[1],], mapping = aes(ymin=0, ymax=y), fill = "red") +
geom_line(lwd=1.5) +
labs(title = "Función de densidad",
x = "x",
y = "Densidad a Posteriori"
) +
geom_hline(yintercept=fdp.int, linetype="dashed", lwd=1.5, color="blue") +
theme_light()
pi
n <- 10
sumx <- -2.5
sigma1 <- 0.5^2
sigma2 <- 0.5^2
mu1 <- 1
mu2 <- -1
sigma <- 1
denom1 <- (n * sigma1 + sigma)**(-1)
denom2 <- (n * sigma2 + sigma)**(-1)
C1 <- (2*pi*denom1)**(-n/2) * exp(denom1*(-sumx*n*sigma1/sigma - sumx - mu1*n - mu1*sigma1/sigma + sigma*mu1^2))
mu1^2
mu2^2
sigma1
mu1^2/sigma1
C1 <- (2*pi*denom1)**(-n/2) * exp(denom1*(-sumx*n*sigma1/sigma - sumx - mu1*n - mu1*sigma1/sigma + sigma*mu1^2/sigma1 + 2*mu1*sumx + sigma1*sumx^2/sigma))
C1
C1 <- (2*pi*denom1)^(-n/2) * exp(denom1*(-sumx*n*sigma1/sigma - sumx - mu1*n - mu1*sigma1/sigma + sigma*mu1^2/sigma1 + 2*mu1*sumx + sigma1*sumx^2/sigma))
C1
C2 <- (2*pi*denom2)^(-n/2) * exp(denom2*(-sumx*n*sigma2/sigma - sumx - mu2*n - mu2*sigma2/sigma + sigma*mu2^2/sigma2 + 2*mu2*sumx + sigma2*sumx^2/sigma))
C2
sumx
(2*pi*denom2)^(-n/2)
(2*pi*denom1)^(-n/2)
-sumx*n*sigma1/sigma - sumx - mu1*n
-sumx*n*sigma1/sigma - sumx
-sumx*n*sigma2/sigma - sumx
w01 <- 0.9
w02 <- 0.1
C <- w01 * C1 + w02 * C2
C
C1
C2
w01 * C1
w02 * C2
# Pesos a posteriori
w11 <- w01 * C1 / C
w11
w12 <- w02 * C2 / C
w12
w11
w11
w12
n <- 10
sumx <- -2.5
sigma1 <- 0.5^2
sigma2 <- 0.5^2
mu1 <- 1
mu2 <- -1
sigma <- 1
denom1 <- (n * sigma1 + sigma)^(-1)
denom2 <- (n * sigma2 + sigma)^(-1)
C1 <- (2*pi*denom1)^(-n/2) * exp(denom1*(-sumx*n*sigma1/sigma - sumx - mu1*n - mu1*sigma1/sigma + sigma*mu1^2/sigma1 + 2*mu1*sumx + sigma1*sumx^2/sigma)) # No conocemos sum x_i^2, pero igual se cancelará, lo único que no es lo que lleva \mu_j, pues es diferente para j=1,2.
C2 <- (2*pi*denom2)^(-n/2) * exp(denom2*(-sumx*n*sigma2/sigma - sumx - mu2*n - mu2*sigma2/sigma + sigma*mu2^2/sigma2 + 2*mu2*sumx + sigma2*sumx^2/sigma))
w01 <- 0.9
w02 <- 0.1
C <- w01 * C1 + w02 * C2
# Pesos a posteriori
w11 <- w01 * C1 / C
w12 <- w02 * C2 / C
var1 <- (n/sigma + 1/sigma1)^(-1)
var2 <- (n/sigma + 1/sigma2)^(-1)
set.seed(2023)
simula2 <- NULL
for (j in 1:10000) {
if (runif(1) < w11){
simula[j] <- rnorm(1, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1))
}
else{
simula[j] <- rnorm(1, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
}
}
var1 <- (n/sigma + 1/sigma1)^(-1)
var2 <- (n/sigma + 1/sigma2)^(-1)
set.seed(2023)
simula2 <- NULL
for (j in 1:10000) {
if (runif(1) < w11){
simula2[j] <- rnorm(1, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1))
}
else{
simula2[j] <- rnorm(1, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
}
}
hist(simula2,
probability = T,
breaks = 50,
main = "Histograma de simulaciones de la Posteriori"
)
var1
var1*(mu1/sigma1 + sumx/sigma)
var2*(mu2/sigma2 + sumx/sigma)
var1 <- (n/sigma + 1/sigma1)^(-1)
var2 <- (n/sigma + 1/sigma2)^(-1)
set.seed(2023)
simula2 <- NULL
for (j in 1:10000) {
if (runif(1) < w11){
simula2[j] <- rnorm(1, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1))
}
else{
simula2[j] <- rnorm(1, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
}
}
hist(simula2,
probability = T,
breaks = 50,
main = "Histograma de simulaciones de la Posteriori"
)
pnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
x <- 1:1000
pnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
x <- 1:1000
dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
x <- seq(from = -20, to = 20, length.out = 0.01)
dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
x <- seq(from = -20, to = 20, length.out = 0.01)
x
seq(from = -20, to = 20, length.out = 0.01)
x <- seq(from = -20, to = 20, length.out = 10000)
x
x <- seq(from = -20, to = 20, length.out = 2000)
dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
x <- seq(from = -20, to = 20, length.out = 1000)
dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
x <- seq(from = -15, to = 15, length.out = 1000)
dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
x <- seq(from = -10, to = 10, length.out = 1000)
dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
densidad <- density(simula2)
densidad <- density(simula2)
datos <- data.frame(x = densidad$x, y = densidad$y)
intervalo <- hdi(densidad, allowSplit = TRUE, credMass = 0.95) #Al aplicar density() el intervalo cambia un poco
n <- 17
Y <- 10
a_1 <- 1 # \alpha_1
b_1 <- 23 # \beta_1
a_2 <- 15 # \alpha_2
b_2 <- 1 # \beta_2
C_1 <- gamma(n+1)*gamma(a_1+b_1)*gamma(Y+a_1)*gamma(n-Y+b_1)/(gamma(n-Y+1)*gamma(Y+1)*gamma(a_1+b_1+n)*gamma(a_1)*gamma(b_1))
C_2 <- gamma(n+1)*gamma(a_2+b_2)*gamma(Y+a_2)*gamma(n-Y+b_2)/(gamma(n-Y+1)*gamma(Y+1)*gamma(a_2+b_2+n)*gamma(a_2)*gamma(b_2))
C <- 0.5*C_1 + 0.5*C_2
(w_1 <- 0.5 * C_1 / C)
(w_2 <- 0.5 * C_2 / C)
set.seed(2023)
simula <- NULL
for (j in 1:10000) {
if (runif(1) < w_1){
simula[j] <- rbeta(1, Y+a_1, n-Y+b_1)
}
else{
simula[j] <- rbeta(1, Y+a_2, n-Y+b_2)
}
}
hist(simula,
probability = T,
breaks = 50,
main = "Histograma de simulaciones de la Posteriori"
)
library(TeachingDemos)
intervalo <- emp.hpd(simula, conf=0.95)
intervalo
library(HDInterval)
hdi(simula, allowSplit = TRUE, credMass = 0.95)
library(ggplot2)
densidad <- density(simula)
datos <- data.frame(x = densidad$x, y = densidad$y)
intervalo <- hdi(densidad, allowSplit = TRUE, credMass = 0.95) #Al aplicar density() el intervalo cambia un poco
fdp.int <- attr(intervalo, 'height')
#hdi también devuelve los extremos de los intervalos evaluados en la densidad (en este caso solo es un punto el que devuelve, ya que ambos extremos evaluados valen lo mismo). Para obtenerlos se puede usar esto
ggplot(data=datos, mapping=aes(x = x, y = y)) +
geom_ribbon(data=datos[datos$x < intervalo[2],][datos$x > intervalo[1],], mapping = aes(ymin=0, ymax=y), fill = "red") +
geom_line(lwd=1.5) +
labs(title = "Función de densidad",
x = "x",
y = "Densidad a Posteriori"
) +
geom_hline(yintercept=fdp.int, linetype="dashed", lwd=1.5, color="blue") +
theme_light()
library(hdrcde)
region <- hdr.den(simula, prob=95) # En porcentaje
region
n <- 10
sumx <- -2.5
sigma1 <- 0.5^2
sigma2 <- 0.5^2
mu1 <- 1
mu2 <- -1
sigma <- 1
denom1 <- (n * sigma1 + sigma)^(-1)
denom2 <- (n * sigma2 + sigma)^(-1)
C1 <- (2*pi*denom1)^(-n/2) * exp(denom1*(-sumx*n*sigma1/sigma - sumx - mu1*n - mu1*sigma1/sigma + sigma*mu1^2/sigma1 + 2*mu1*sumx + sigma1*sumx^2/sigma)) # No conocemos sum x_i^2, pero igual se cancelará, lo único que no es lo que lleva \mu_j, pues es diferente para j=1,2.
C2 <- (2*pi*denom2)^(-n/2) * exp(denom2*(-sumx*n*sigma2/sigma - sumx - mu2*n - mu2*sigma2/sigma + sigma*mu2^2/sigma2 + 2*mu2*sumx + sigma2*sumx^2/sigma))
w01 <- 0.9
w02 <- 0.1
C <- w01 * C1 + w02 * C2
# Pesos a posteriori
w11 <- w01 * C1 / C
w12 <- w02 * C2 / C
intervalo
densidad <- density(simula2)
simula2
densidad <- density(simula2)
datos <- data.frame(x = densidad$x, y = densidad$y)
intervalo <- hdi(densidad, allowSplit = TRUE, credMass = 0.95)
intervalo
fdp.int <- attr(intervalo, 'height')
ggplot(data=datos, mapping=aes(x = x, y = y)) +
geom_ribbon(data=datos[datos$x < intervalo[2],][datos$x > intervalo[1],], mapping = aes(ymin=0, ymax=y), fill = "red") +
geom_line(lwd=1.5) +
labs(title = "Función de densidad",
x = "x",
y = "Densidad a Posteriori"
) +
geom_hline(yintercept=fdp.int, linetype="dashed", lwd=1.5, color="blue") +
theme_light()
ggplot(data=datos, mapping=aes(x = x, y = y)) +
geom_density() +
theme_light()
ggplot(data=datos, mapping=aes(x)) +
geom_density() +
theme_light()
datos$z
datos$x
simula2
ggplot(NULL, mapping=aes(simula)) +
geom_density() +
theme_light()
ggplot(NULL, mapping=aes(simula2)) +
geom_density() +
theme_light()
w11
ggplot(NULL, mapping=aes(w11*dnorm(1, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(1, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_line() +
theme_light()
x <- seq(-14, 14, length.out = 1000)
x
ggplot(NULL, mapping=aes(w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_line() +
theme_light()
w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))
w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
ggplot(NULL, mapping=aes(w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_density() +
theme_light()
ggplot(NULL, mapping=aes(x = x, y = w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_density() +
theme_light()
x
ggplot(NULL, mapping=aes(x = x, y = w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_density() +
theme_light()
ggplot(NULL, mapping=aes(x = x, y = w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_line() +
theme_light()
ggplot(NULL, mapping=aes(x = x, y = w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_line() +
scale_x_continuous(limits = c(-3,3)) +
theme_light()
ggplot(NULL, mapping=aes(x = x, y = w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_line() +
scale_x_continuous(limits = c(-2,2)) +
theme_light()
ggplot(NULL, mapping=aes(x = x, y = w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_line() +
scale_x_continuous(limits = c(-2,1)) +
theme_light()
mean(simula2)
ggplot(NULL, mapping=aes(x = x, y = w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_line() +
scale_x_continuous(limits = c(-1.5,1)) +
theme_light()
ggplot(NULL, mapping=aes(x = x, y = w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_line() +
scale_x_continuous(limits = c(-1.5,0.5)) +
theme_light()
w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2))
x <- seq(-10, 9, length.out = 1000)
ggplot(NULL, mapping=aes(x = x, y = w11*dnorm(x, mean = var1*(mu1/sigma1 + sumx/sigma), sd = sqrt(var1)) + w12*dnorm(x, mean = var2*(mu2/sigma2 + sumx/sigma), sd = sqrt(var2)))) +
geom_line() +
scale_x_continuous(limits = c(-1.5,0.5)) +
theme_light()
n1 <- 90
n2 <- 100
x1 <- 13
x2 <- 12
# Simulamos de ambas posterioris
set.seed(2023)
post1jef <- rbeta(10^5, 1/2 + x1, 1/2 + n1 - x1)
post1jef <- rbeta(10^5, 1/2 + x2, 1/2 + n2 - x2)
# Simulamos de ambas posterioris
set.seed(2023)
post1jef <- rbeta(10^5, 1/2 + x1, 1/2 + n1 - x1)
post2jef <- rbeta(10^5, 1/2 + x2, 1/2 + n2 - x2)
post1jef <- rbeta(10^5, 1/2 + x1, 1/2 + n1 - x1)
# Simulamos de ambas posterioris
set.seed(2023)
post1jef <- rbeta(10^5, 1/2 + x1, 1/2 + n1 - x1)
post2jef <- rbeta(10^5, 1/2 + x2, 1/2 + n2 - x2)
probjef <- mean(post1jef == post2jef)
probjef
probjef <- sum(post1jef == post2jef)
probjef
post1jef == post2jef
probjef <- mean(post1jef > post2jef)
probjef
post1pla <- rbeta(10^5, 1 + x1, 1 + n1 - x1)
post2pla <- rbeta(10^5, 1 + x2, 1 + n2 - x2)
(probjef <- mean(post1jef > post2jef))
(probpla <- mean(post1pla > post2pla))
post1pn <- rbeta(10^5, x1, n1 - x1)
post2pn <- rbeta(10^5, x2, n2 - x2)
(probpn <- mean(post1pn > post2pn))
10^5
327*0.4
327*0.4
pbinom(131, n = 327, p = 0.5)
pbinom(131, size = 327, prob = 0.5)
1 - pbinom(131, size = 327, prob = 0.5)
pbinom(131, size = 327, prob = 0.5)
327*0.4
round(327*0.4)
pbinom(131, size = 327, prob = 0.5)
(327*0.4)
sumx <- round(327*0.4)
pbeta(0.5, 1 + sumx, 1 + n - sumx)
sumx <- round(327*0.4)
n <- 327
pbeta(0.5, 1 + sumx, 1 + n - sumx)
round(327*0.4)
round(327*0.4)
pbinom(131, size = 327, prob = 0.5)
1 - pbinom(131, size = 327, prob = 0.5)
pbinom(131, size = 327, prob = 0.5)
pbinom(130.5, size = 327, prob = 0.5)
pbinom(131, size = 327, prob = 0.5)
round(327*0.4)
pbinom(131, size = 327, prob = 0.5)
library(tidyverse)
arboles <- read_delim("arboles.csv")
View(arboles)
arboles
arboles %>%
ggplot(aes(x = circunferencia, y = altura))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) %>%
geom_point()
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_point()
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_point() +
labs(title = "Longitud de árboles versus ancho del tronco", y = "Altura del árbol", x = "Longitud de la circunferencia del tronco")
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_point() +
labs(title = "Longitud de árboles versus ancho del tronco", y = "Altura del árbol", x = "Longitud de la circunferencia del tronco") +
theme(plot.title = element_text(size = 20))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_point() +
labs(title = "Longitud de árboles versus ancho del tronco", y = "Altura del árbol", x = "Longitud de la circunferencia del tronco") +
theme(plot.title = element_text(size = 16))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_point(colour = "#070B96") +
labs(title = "Longitud de árboles versus ancho del tronco", y = "Altura del árbol", x = "Longitud de la circunferencia del tronco") +
theme(plot.title = element_text(size = 16))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_point(colour = "#070B96") +
labs(title = "Longitud de árboles versus ancho del tronco", y = "Altura del árbol", x = "Longitud de la circunferencia del tronco") +
theme(plot.title = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_point(colour = "#070B96") +
labs(title = "Longitud de árboles versus ancho del tronco", y = "Altura del árbol", x = "Longitud de la circunferencia del tronco") +
theme(plot.title = element_text(size = 17),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_point(colour = "#070B96") +
labs(title = "Longitud de árboles versus ancho del tronco",
y = "Altura del árbol",
x = "Longitud de la circunferencia del tronco",
subtitle = "En pulgadas") +
theme(plot.title = element_text(size = 17),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
arboles
modelo <- lm(altua ~ circunferencia - 1, arboles)
modelo <- lm(altura ~ circunferencia - 1, arboles)
modelo$coefficients
arboles$ajuste <- modelo$fitted.values
modelo <- lm(altura ~ circunferencia - 1, arboles)
arboles$ajuste <- modelo$fitted.values
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_point(colour = "#070B96") +
labs(title = "Longitud de árboles versus ancho del tronco",
y = "Altura del árbol",
x = "Longitud de la circunferencia del tronco",
subtitle = "En pulgadas") +
theme(plot.title = element_text(size = 17),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_line(aes(x = ajustados)) +
geom_point(colour = "#070B96") +
labs(title = "Longitud de árboles versus ancho del tronco",
y = "Altura del árbol",
x = "Longitud de la circunferencia del tronco",
subtitle = "En pulgadas") +
theme(plot.title = element_text(size = 17),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_line(aes(x = ajuste)) +
geom_point(colour = "#070B96") +
labs(title = "Longitud de árboles versus ancho del tronco",
y = "Altura del árbol",
x = "Longitud de la circunferencia del tronco",
subtitle = "En pulgadas") +
theme(plot.title = element_text(size = 17),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_line(aes(y = ajuste)) +
geom_point(colour = "#070B96") +
labs(title = "Longitud de árboles versus ancho del tronco",
y = "Altura del árbol",
x = "Longitud de la circunferencia del tronco",
subtitle = "En pulgadas") +
theme(plot.title = element_text(size = 17),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_line(aes(y = ajuste), colour = "#DE0000") +
geom_point(colour = "#070B96") +
labs(title = "Longitud de árboles versus ancho del tronco",
y = "Altura del árbol",
x = "Longitud de la circunferencia del tronco",
subtitle = "En pulgadas") +
theme(plot.title = element_text(size = 17),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
arboles %>%
ggplot(aes(x = circunferencia, y = altura)) +
geom_line(aes(y = ajuste), colour = "#DE0000", lwd = 1) +
geom_point(colour = "#070B96") +
labs(title = "Longitud de árboles versus ancho del tronco",
y = "Altura del árbol",
x = "Longitud de la circunferencia del tronco",
subtitle = "En pulgadas") +
theme(plot.title = element_text(size = 17),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
anova(modelo)
